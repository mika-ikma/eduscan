import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, FlatList, StyleSheet, TouchableOpacity, ActivityIndicator, Alert } from 'react-native';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASE_API_URL } from "../../config.json";
import { useFocusEffect, useNavigation } from '@react-navigation/native';
import { MaterialIcons } from "@expo/vector-icons";
import { Camera } from 'expo-camera';


const StudentSubjectList = () => {
  const [subjects, setSubjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigation = useNavigation();

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ QR-—Å–∫–∞–Ω–µ—Ä
  const requestCameraPermission = async () => {
    const { status } = await Camera.requestCameraPermissionsAsync();
    if (status === 'granted') {
      navigation.navigate("QRScanner"); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    } else {
      Alert.alert("–û—à–∏–±–∫–∞", "–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.");
    }
  };

  // –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const fetchSubjects = async () => {
    setLoading(true);
    setError(null);
    try {
      const token = await AsyncStorage.getItem("token");
      if (!token) throw new Error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");

      const response = await axios.get(`${BASE_API_URL}/student/subjects/`, {
        headers: { Authorization: `Token ${token}` },
      });

      setSubjects(response.data);
    } catch (err) {
      setError(err.response ? `–û—à–∏–±–∫–∞ ${err.response.status}: ${err.response.data.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}` : "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    } finally {
      setLoading(false);
    }
  };

  useFocusEffect(
    useCallback(() => {
      fetchSubjects();
    }, [])
  );

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞
  const handleUnenroll = async (subjectId) => {
    Alert.alert(
      "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
      "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫—É—Ä—Å–∞?",
      [
        { text: "–û—Ç–º–µ–Ω–∞", style: "cancel" },
        {
          text: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
          onPress: async () => {
            try {
              const token = await AsyncStorage.getItem("token");
              await axios.delete(`${BASE_API_URL}/student/subjects/${subjectId}/unenroll/`, {
                headers: { Authorization: `Token ${token}` },
              });

              Alert.alert("–£—Å–ø–µ—Ö", "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞.");
              fetchSubjects();
            } catch (err) {
              Alert.alert("–û—à–∏–±–∫–∞", err.response?.data?.detail || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.");
            }
          },
          style: "destructive",
        },
      ]
    );
  };

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const renderItem = ({ item }) => (
    <View style={styles.subjectContainer}>
      <TouchableOpacity onPress={() => navigation.navigate('StudentSubjectLessons', { subjectId: item.id })} style={styles.subjectInfo}>
        <Text style={styles.subjectTitle}>{item.title}</Text>
      </TouchableOpacity>
      <TouchableOpacity style={styles.unenrollButton} onPress={() => handleUnenroll(item.id)}>
        <Text style={styles.unenrollButtonText}>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è</Text>
      </TouchableOpacity>
    </View>
  );

  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
  if (loading) {
    return (
      <View style={styles.centered}>
        <ActivityIndicator size="large" color="#4A90E2" />
        <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞...</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  if (error) {
    return (
      <View style={styles.centered}>
        <Text style={styles.errorText}>{error}</Text>
      </View>
    );
  }

  // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç
  if (!loading && subjects.length === 0) {
    return (
      <View style={styles.centered}>
        <Text style={styles.noSubjectsText}>
          üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤.{"\n"}
          –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –≤ –≥—Ä—É–ø–ø—É.
        </Text>
        <TouchableOpacity style={styles.button} onPress={() => navigation.navigate('–ì—Ä—É–ø–ø—ã')}>
          <Text style={styles.buttonText}>–ü–µ—Ä–µ–π—Ç–∏ –∫ –≥—Ä—É–ø–ø–∞–º</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üìö –í–∞—à–∏ –∫—É—Ä—Å—ã</Text>

      <FlatList
        data={subjects}
        renderItem={renderItem}
        keyExtractor={(item) => item.id.toString()}
      />

      {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞ */}
      <TouchableOpacity style={styles.scanButton} onPress={requestCameraPermission}>
        <MaterialIcons name="qr-code-scanner" size={30} color="white" />
        <Text style={styles.scanButtonText}>–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR</Text>
      </TouchableOpacity>
    </View>
  );
};

// ‚úÖ **–°—Ç–∏–ª–∏**
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#F5F7FA",
    padding: 20,
  },
  title: {
    fontSize: 26,
    fontWeight: 'bold',
    textAlign: 'center',
    color: "#333",
    marginBottom: 20,
  },
  subjectContainer: {
    backgroundColor: "white",
    padding: 15,
    marginVertical: 8,
    borderRadius: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
  },
  subjectInfo: {
    flex: 1,
  },
  subjectTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: "#4A90E2",
  },
  unenrollButton: {
    backgroundColor: "red",
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
  },
  unenrollButtonText: {
    color: "white",
    fontSize: 14,
    fontWeight: "bold",
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 16,
    color: "#4A90E2",
    marginTop: 10,
  },
  errorText: {
    fontSize: 16,
    color: "red",
    textAlign: "center",
  },
  noSubjectsText: {
    fontSize: 18,
    color: "#666",
    textAlign: "center",
    marginTop: 20,
  },
  scanButton: {
    backgroundColor: "#007AFF",
    paddingVertical: 15,
    paddingHorizontal: 30,
    borderRadius: 8,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginTop: 20,
    alignSelf: "center",
  },
  scanButtonText: {
    color: "white",
    fontSize: 16,
    fontWeight: "bold",
    marginLeft: 10,
  },
});

export default StudentSubjectList;
