import React, { useState, useEffect } from "react";
import { View, Text, StyleSheet, TouchableOpacity, Alert } from "react-native";
import { CameraView, useCameraPermissions } from "expo-camera";
import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { BASE_API_URL } from "../../config.json"; // –¢–µ–ø–µ—Ä—å BASE_API_URL –±–µ–∑ "/api"

const QRScannerScreen = ({ navigation }) => {
  const [scanned, setScanned] = useState(false);
  const [permission, requestPermission] = useCameraPermissions();

  useEffect(() => {
    if (!permission) {
      requestPermission();
    }
  }, [permission]);

  const parseAttendanceUrl = (url) => {
    console.log("üìå –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", typeof url);  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø

    if (typeof url !== "string") {
        console.error("‚ùå QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", url);
        return [null, null];
    }

    url = url.trim();  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã

    const match = url.match(/\/api\/subjects\/attendance\/(\d+)\/([^/]+)/);
    console.log("üìå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–∫–∏:", match);

    return match ? [match[1], match[2]] : [null, null];
};


const handleBarCodeScanned = async ({ data }) => {
  if (scanned) return;
  setScanned(true);

  console.log("üìå QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç:", data);

  const [lessonId, token] = parseAttendanceUrl(data);
  console.log("üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π lessonId:", lessonId);
  console.log("üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π token:", token);

  if (!lessonId || !token) {
      Alert.alert("‚ùå –û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π QR-–∫–æ–¥!");
      console.log("‚ùå –û—à–∏–±–∫–∞: QR-–∫–æ–¥ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É!");
  } else {
      const requestUrl = `${BASE_API_URL.replace(/\/$/, "")}/subjects/attendance/${lessonId}/${token}/`;
      console.log("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:", requestUrl);

      try {
          const authToken = await AsyncStorage.getItem("token");
          if (!authToken) {
              Alert.alert("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!");
              setScanned(false);
              return;
          }

          console.log("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω:", authToken);

          const response = await axios.post(
              requestUrl,
              {},
              {
                  headers: {
                      Authorization: `Token ${authToken}`,
                      "Content-Type": "application/json",
                  },
              }
          );

          console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);

          if (response.data.success) {
              Alert.alert("‚úÖ –£—Å–ø–µ—Ö", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞!", [
                  { text: "OK", onPress: () => navigation.goBack() },
              ]);
          } else if (response.data.info === "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞.") {
              Alert.alert("‚ÑπÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞.");
          } else {
              Alert.alert("‚ùå –û—à–∏–±–∫–∞", response.data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏");
          }
      } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
          Alert.alert("‚ùå –û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å!");
      }
  }

  setTimeout(() => {
      setScanned(false);
  }, 2000);
};



  

  if (!permission) {
    return <Text>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...</Text>;
  }
  if (!permission.granted) {
    return <Text>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ</Text>;
  }

  return (
    <View style={styles.container}>
      <CameraView
        style={styles.camera}
        facing="back"
        onBarcodeScanned={scanned ? undefined : handleBarCodeScanned} // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      >
        <View style={styles.overlay}>
          <Text style={styles.text}>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</Text>
        </View>
      </CameraView>
      <TouchableOpacity
        style={styles.closeButton}
        onPress={() => navigation.goBack()}
      >
        <Text style={styles.closeButtonText}>–ó–∞–∫—Ä—ã—Ç—å</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
  },
  camera: {
    flex: 1,
  },
  overlay: {
    flex: 1,
    backgroundColor: "rgba(0,0,0,0.5)",
    alignItems: "center",
    justifyContent: "center",
  },
  text: {
    fontSize: 18,
    color: "#fff",
    fontWeight: "bold",
  },
  closeButton: {
    position: "absolute",
    bottom: 40,
    alignSelf: "center",
    backgroundColor: "red",
    padding: 10,
    borderRadius: 5,
  },
  closeButtonText: {
    color: "white",
    fontWeight: "bold",
  },
});

export default QRScannerScreen;
